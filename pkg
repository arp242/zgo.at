#!/bin/zsh

set -euC

typeset -A libs=(
	go-sqlite3  ~/code/Golib/zdb-drivers
	pq          ~/code/Golib/zdb-drivers
	pgx         ~/code/Golib/zdb-drivers
	mysql       ~/code/Golib/zdb-drivers

	acidtab    ~/code/Golib
	blackmail  ~/code/Golib
	errors     ~/code/Golib
	follow     ~/code/Golib
	gadget     ~/code/Golib
	guru       ~/code/Golib
	hubhub     ~/code/Golib
	isbot      ~/code/Golib
	jfmt       ~/code/Prog
	json       ~/code/Golib
	ps         ~/code/Golib
	runewidth  ~/code/Golib
	sconfig    ~/code/Golib
	slog_align ~/code/Golib
	term       ~/code/Golib
	termfo     ~/code/Golib
	termtext   ~/code/Golib
	tz         ~/code/Golib
	z18n       ~/code/Golib
	zcache     ~/code/Golib
	zdb        ~/code/Golib
	zhttp      ~/code/Golib
	zli        ~/code/Golib
	zlog       ~/code/Golib
	zprof      ~/code/Golib
	zstd       ~/code/Golib
	zstripe    ~/code/Golib
	ztpl       ~/code/Golib
	zvalidate  ~/code/Golib
)

typeset -A progs=(
	#bahamut      ~/code/Prog
	border       ~/code/Prog
	cantuse      ~/code/Prog
	colorcount   ~/code/Prog
	elles        ~/code/Prog
	git-stats    ~/code/Prog
	goatcounter  ~/code/Prog
	goimport     ~/code/Prog
	gomodgraph   ~/code/Prog
	gosodoff     ~/code/Prog
	har          ~/code/Prog
	jfmt         ~/code/Prog/jfmt/cmd
	kommentaar   ~/code/Prog
	singlepage   ~/code/Prog
	sqlbench     ~/code/Prog
	uni          ~/code/Prog
	wtff         ~/code/Prog
	zcert        ~/code/Prog
)
#zsrv         ~/code/Prog
# autofox
# orgstat

if [[ ! -f .cache/repos.json ]]; then
	: >|repos.json
	for i in {1..10}; do
		local data=$(curl -sH 'Accept: application/vnd.github.v3+json' \
			"https://api.github.com/users/arp242/repos?per_page=100&page=$i")

		jq '.[]' <<<$data >>|.cache/repos.json

		(( $(jq '. | length' <<<$data) < 100 )) && break
	done
fi

IFS=$'\n' typeset -A stars=($(< .cache/repos.json jq -Mr '.name, .stargazers_count'))
IFS=$'\n' typeset -A descs=($(< .cache/repos.json jq -Mr '.name, .description'))

rm-v() {
	print ${1%/v?}
}

mk() {
	local name=${1}
	local dir=$2

	local pkg=$(cd $dir && go list)
	local repo=$(cd $dir && git remote get-url origin)
	local repo="https://${${${repo##git@}%%.git}//://}"

	local org=${repo:h:t}
	if [[ $org != arp242 && $org != zgoat ]]; then
		print >&2 "unexpected organisation '$org' in '$repo'; skipping"
		continue
	fi

	printf "%-38s  │  %-26s  │  %s\n" "$(printf '%s (%s)' $pkg $name)" ${dir//$HOME\/code/\~c} $repo

	for p in $(cd "$dir" && go list ./...); do
		name=${p##zgo.at/}
		name=${name##arp242.net/}
		#print "     write $name.html"

		mkdir -p "$name"
		cat <<-EOF | tee "$name.html" "$name/index.html">/dev/null
			<!DOCTYPE html>
			<html><head>
				<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
				<meta name="go-import" content="$pkg git $repo.git">
				<meta name="go-source" content="$pkg $repo $repo/tree/master/{/dir}/ $repo/tree/master/{/dir}/{file}#L{line}">
				<meta http-equiv="refresh" content="0; url=$repo">
			</head><body><p>
				This is the <code>$pkg</code> Go package. Its homepage is at <a href="$repo">$repo</a>.
			</p></body></html>
		EOF
	done
}

index-progs() {
	typeset -A sorted
	for name in ${(ok)progs}; do
		local s=${stars[$name]:-0}
		sorted[$s$name]=$(mk-card $name 0)
	done

	print '<section class="page">\n<h2 id="applications">Applications</h2>'
	for k in ${(nOk)sorted}; print $sorted[$k]
	print '</section>'
}

index-libs() {
	typeset -A sorted
	for name in ${(ok)libs}; do
		[[ $libs[$name] = ~/code/Golib/zdb-drivers ]] && continue
		local s=${stars[$name]:-0}
		sorted[$s$name]=$(mk-card $name 1)
	done

	print '<section class="page">\n<h2 id="libraries">Libraries</h2>'
	for k in ${(nOk)sorted}; print $sorted[$k]
	print '</section>'
}

mk-card() {
	local name=$1
	local is_lib=$2
	if (( $is_lib )); then
		local dir=$libs[${name%/v2}]/${name%/v2}
	else
		local dir=$progs[${name%/v2}]/${name%/v2}
	fi
	local pkg=$(cd $dir && go list)
	local repo=$(cd $dir && git remote get-url origin)
	repo="https://${${${repo##git@}%%.git}//://}"

	local star=${stars[$name]:-}
	local desc=${descs[$name]:-}

	desc=${${desc%.}% }.  # libs
	desc=${desc//#Go (package|library)( to)?/}
	desc=${desc//% (for|in) Go./.}
	desc=${(U)desc[1]}${desc[2,-1]}
	[[ $desc = "Null." ]] && desc=

	local version=$(cd $dir && go list -m -versions -json | jq -rM '.Versions | .[-1]')
	[[ $version = 'null' ]] && version=
	
	# Version can be retracted; just ignore it.
	cd $dir
	git show $version >/dev/null 2>&1 || version=
	cd -
	#local date=$(cd $dir && git log -n1 --date=format:'%b %Y' --format=%cd $version)

	local header=$name
	(( $is_lib )) && header=$pkg
	<<-EOF
		<div>
			<h3><a href="$repo">$(rm-v $header)</a></h3>
			<code><a href="https://godocs.io/$pkg">godoc</a></code>
			<p>$desc</p>
			<span>$version $([[ -n $version ]] && print '│') ★ $star</span>
		</div>
	EOF
}

index() {
	awk '/^XXXXX$/ { exit }; { print $0 }' index.tpl
	index-progs
	index-libs
	awk '/^XXXXX$/ { found=1; next }; { if (found) print $0 }' index.tpl
}

# TODO: v3, v4, ...
for name in ${(ok)progs}; mk $name $progs[${name%/v2}]/${name%/v2}
for name in ${(ok)libs};  mk $name $libs[${name%/v2}]/${name%/v2}
index | singlepage -m '' -l css,image,font >| index.html
